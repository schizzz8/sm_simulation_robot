<launch>

  <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 --> 
  <arg name="gui" default="true"/>
  <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons --> 
  <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro --> 
  <arg name="map_name" default="simulated_dataset"/>
  
  <include file="$(find cob_bringup_sim)/launch/robot.launch">
    <arg name="robot_env" value="ipa-apartment" />
  </include>

  <include file="$(find cob_default_env_config)/upload_object_locations.launch">
    <arg name="robot_env" value="ipa-apartment" />
  </include>

  <node pkg="cob_bringup_sim" type="spawn_object.py" name="spawn_objects" args="all" />

  <node name="map_server" pkg="map_server" type="map_server" args="$(find semantic_map_extraction)/maps/$(arg map_name).yaml" />
  <node name="amcl" pkg="amcl" type="amcl">
    <param name="base_frame_id" value="/base_footprint"/>
    <param name="update_min_d" value="-1"/>
    <param name="update_min_a" value="-1"/>
    <remap from="scan" to="/scan"/>
  </node>
  
  <include file="$(find sm_simulation_robot)/launch/includes/kobuki_with_logical.launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>
  
  <node pkg="rostopic" type="rostopic" name="motor_activator" args="pub /mobile_base/commands/motor_power kobuki_msgs/MotorPower 'state: 1'" output="screen"/>
  <include file="$(find turtlebot_teleop)/launch/keyboard_teleop.launch" />
  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  
  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="/camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <!-- robot semantic map -->
  <node name="semantic_map_extraction_node" pkg="semantic_map_extraction" type="semantic_map_extraction_node" args="0" output="screen">
		<param name="save_path" type="string" value="$(find semantic_map_extraction)/sem_maps" />
		<param name="statXMLFilePath" type="string" value="$(find semantic_map_extraction)/XML/mapXMLfile$(arg map_name).xml" />
		<param name="dynXMLFilePath" type="string" value="$(find semantic_map_extraction)/XML/augmentedMapXMLfile$(arg map_name).xml" />
		<param name="add_objects_timeout" type="int" value="30" />
		<param name="wait_prolog_service" type="bool" value="false" />
		<param name="load_dynamic_map" type="bool" value="true" />
    <param name="robot_name" type="string" value="" />
	</node>

  <node name="create_kb" pkg="semantic_map_extraction" type="create_kb.py" args="0" output="screen" respawn="true" >
    <param name="save_path" type="string" value="$(find semantic_map_extraction)/run.txt" />
  </node>
  <!-- ground truth -->
  <group ns="ground_truth">
	  <node name="semantic_map_extraction_node" pkg="semantic_map_extraction" type="semantic_map_extraction_node" args="0" output="screen">
		  <param name="save_path" type="string" value="$(find semantic_map_extraction)/sem_maps" />
		  <param name="statXMLFilePath" type="string" value="$(find semantic_map_extraction)/XML/mapXMLfile$(arg map_name).xml" />
		  <param name="dynXMLFilePath" type="string" value="$(find semantic_map_extraction)/XML/ground_truth_augmentedMapXMLfile$(arg map_name).xml" />
		  <param name="add_objects_timeout" type="int" value="30" />
		  <param name="wait_prolog_service" type="bool" value="false" />
		  <param name="load_dynamic_map" type="bool" value="true" />
      <param name="robot_name" type="string" value="" />
      <remap from="/ASR" to="ground_truth_name" />
      <remap from="/ObservationTopic" to="ground_truth_observation" />
      <remap from="/create_kb" to="ground_truth_kb" />
	  </node>
    
    <node name="create_kb" pkg="semantic_map_extraction" type="create_kb.py" args="0" output="screen" respawn="true" >
      <param name="save_path" type="string" value="$(find semantic_map_extraction)/ground_truth.txt" />
      <remap from="/create_kb" to="ground_truth_kb" />
    </node>
  </group>
</launch>
